[1] 522
[1] "\nMIN FEAT VALUES:"
$age
[1] 19

$sex
[1] "female"

$job
[1] 0

$housing
[1] "free"

$saving.accounts
[1] "little"

$checking.account
[1] "little"

$credit.amount
[1] 276

$duration
[1] 6

$purpose
[1] "business"

$risk
[1] "bad"

[1] "\nMAX FEAT VALUES:"
$age
[1] 75

$sex
[1] "male"

$job
[1] 3

$housing
[1] "rent"

$saving.accounts
[1] "rich"

$checking.account
[1] "rich"

$credit.amount
[1] 18424

$duration
[1] 72

$purpose
[1] "vacation/others"

$risk
[1] "good"

# weights:  79
initial  value 362.825251 
iter  10 value 324.982789
iter  20 value 292.640024
iter  30 value 262.149467
iter  40 value 244.220559
iter  50 value 231.476281
iter  60 value 225.860169
iter  70 value 225.544369
iter  80 value 225.541544
final  value 225.541536 
converged
    age  sex job housing saving.accounts checking.account credit.amount duration purpose risk
519  43 male   2     own        moderate           little          1203        6     car good
       good
1 0.9027503
    age  sex job housing saving.accounts checking.account credit.amount duration             purpose risk
369  42 male   2     own          little           little          3446       36 furniture/equipment  bad
       good
1 0.3529568
[1] "\nPoint of Interest: "
    age  sex job housing saving.accounts checking.account credit.amount duration             purpose risk
369  42 male   2     own          little           little          3446       36 furniture/equipment  bad
Called from: private$evaluate(ecrresults)
Called from: run(ds@df, ds@id, ds@target, ds@target_values, ds@nonactionable, 
    ml_alg@id, ml_alg@target_range, n_points_of_interest = 1, 
    TD_PADDING_MULTIPLIER = 5)
debug at #184: if (is.null(data.cf)) {
    points_of_interest_rejected = points_of_interest_rejected + 
        1
    poi_returned_no_cfs = poi_returned_no_cfs + 1
    print("###############################")
    print("# No counterfactuals returned #")
    print("###############################")
} else {
    browser()
    num_cf = nrow(data.cf$results$counterfactuals)
    cf_count = cf_count + num_cf
    print("Counterfactuals: ")
    print(data.cf$results$counterfactuals)
    valid_cf_idx = data.cf$results$counterfactuals$dist.target == 
        0
    data.cf$results$counterfactuals = data.cf$results$counterfactuals[which(valid_cf_idx), 
        ]
    data.cf$results$counterfactuals.diff = data.cf$results$counterfactuals.diff[which(valid_cf_idx), 
        ]
    cf_valid_count = cf_valid_count + nrow(data.cf$results$counterfactuals)
    cf_inv_count = cf_inv_count + (num_cf - nrow(data.cf$results$counterfactuals))
    data.cf$get_frequency()
    valid_cfs = data.cf$results$counterfactuals[, 1:(ncol(data.cf$results$counterfactuals[, 
        ]) - NCOLS_CF_METADATA)]
    valid_cf_tested = FALSE
    fully_categ_cf = FALSE
    j = 0
    while (j < nrow(valid_cfs)) {
        j = j + 1
        cf = valid_cfs[j, ]
        print("\nOriginal CF:")
        print(cf)
        result = pred$predict(cf)
        print(result)
        cf_resilience_df = getResilience(x.interest[, -which(names(x.interest) == 
            target)], cf, pred, ml_alg_target_range, max_feat_values, 
            min_feat_values, data_feat_types)
        if (!is.null(cf_resilience_df)) {
            valid_cf_tested = TRUE
            cf_test_count = cf_test_count + 1
            resilience_df[cf_test_count, ] = cf_resilience_df
        }
        else {
            fully_categ_cf = TRUE
        }
    }
    if (valid_cf_tested) {
        points_of_interest_tested = points_of_interest_tested + 
            1
    }
    else if (fully_categ_cf) {
        points_of_interest_rejected = points_of_interest_rejected + 
            1
        poi_returned_fully_categ_cfs = poi_returned_fully_categ_cfs + 
            1
    }
    else if (j == 0) {
        points_of_interest_rejected = points_of_interest_rejected + 
            1
        poi_returned_no_valid_cfs = poi_returned_no_valid_cfs + 
            1
    }
}
Called from: run(ds@df, ds@id, ds@target, ds@target_values, ds@nonactionable, 
    ml_alg@id, ml_alg@target_range, n_points_of_interest = 1, 
    TD_PADDING_MULTIPLIER = 5)
[1] "Counterfactuals: "
  age  sex job housing saving.accounts checking.account credit.amount duration             purpose
1  42 male   2     own          little           little          3446        8 furniture/equipment
2  42 male   2     own          little             rich          3446        6 furniture/equipment
4  42 male   2     own          little           little          3189       36 furniture/equipment
5  42 male   2     own          little           little          3052       36 furniture/equipment
  dist.target dist.x.interest nr.changed  dist.train      pred
1   0.0000000     0.047138047          1 0.012054458 0.9027503
2   0.0000000     0.161616162          2 0.010127051 0.9027503
4   0.1470432     0.001573482          1 0.004904559 0.3529568
5   0.1470432     0.002412265          1 0.004065777 0.3529568
[1] "\nOriginal CF:"
  age  sex job housing saving.accounts checking.account credit.amount duration             purpose
1  42 male   2     own          little           little          3446        8 furniture/equipment
       good
1 0.9027503

Number of Mutated Features: 1
[1] "\nMutated Features:"
[1] "duration"

Mutated Feature: duration
[1] "\nMAX_STEPS:"
[1] 2

Increment: -1.000000
  age  sex job housing saving.accounts checking.account credit.amount duration             purpose
1  42 male   2     own          little           little          3446        7 furniture/equipment
       good
1 0.9027503
  age  sex job housing saving.accounts checking.account credit.amount duration             purpose
1  42 male   2     own          little           little          3446        6 furniture/equipment
       good
1 0.9027503
Successful Steps: 2/2
[1] "\n###########################################################\n"
[1] "\nOriginal CF:"
  age  sex job housing saving.accounts checking.account credit.amount duration             purpose
2  42 male   2     own          little             rich          3446        6 furniture/equipment
       good
1 0.9027503

Number of Mutated Features: 1
[1] "\nMutated Features:"
[1] "duration"
[1] "Already at min/max."
[1] "Full resilience."
[1] "\nRESULTS: "
An object of class "resilienceTestResults"
Slot "resilience_df":
  age sex job housing saving.accounts checking.account credit.amount duration purpose
1 NaN NaN NaN     NaN             NaN              NaN           NaN        1     NaN
2 NaN NaN NaN     NaN             NaN              NaN           NaN        1     NaN

Slot "resilience_feat":
resilience_df_redacted 
                     1 

Slot "resilience_feat_perfect_pct":
resilience_df_redacted 
                     1 

Slot "resilience_feat_sd":
resilience_df_redacted 
                     0 

Slot "resilience_feat_var":
resilience_df_redacted 
                     0 

Slot "resilience_feat_max":
resilience_df_redacted 
                     1 

Slot "resilience_feat_min":
resilience_df_redacted 
                     1 

Slot "resilience_cf":
1 2 
1 1 

Slot "resilience_cf_perfect_pct":
1 
1 

Slot "resilience_cf_avg":
[1] 1

Slot "resilience_cf_sd":
[1] 0

Slot "resilience_cf_var":
[1] 0

Slot "resilience_cf_max":
[1] 1

Slot "resilience_cf_min":
[1] 1

Slot "feat_mut_frequency":
resilience_df_redacted 
                     2 

Slot "feat_mut_total":
[1] 2

Slot "cf_total_count":
[1] 4

Slot "cf_valid_count":
[1] 2

Slot "cf_tested_count":
[1] 2

Slot "cf_invalid_count":
[1] 2

Slot "points_of_interest_tested":
[1] 1

Slot "points_of_interest_rejected":
[1] 1

Slot "poi_pred_positive_class":
[1] 1

Slot "poi_returned_no_cfs":
[1] 0

Slot "poi_returned_no_valid_cfs":
[1] 0

Slot "poi_returned_fully_categ_cfs":
[1] 0

Execution Time: 48.377246
